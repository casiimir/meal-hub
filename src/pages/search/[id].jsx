import { useState } from "react";
import Head from "next/head";
import styles from "./Search.module.scss";
import Navbar from "@/components/Navbar";
import Button from "@/components/Button";
import { LuArrowLeft } from "react-icons/lu";
import CardGrid from "@/components/cardGrid";
import { getData } from "@/utils/dbManager";
import SearchBar from "@/components/SearchBar";
import { useRouter } from "next/router";

import { collection, query, where, getDocs } from "firebase/firestore";
import { db } from "@/utils/firebase";

const Search = (props) => {
  // VARIABLES ----------------
  const router = useRouter();
  // CONDITIONS ---------------
  const [pageTitle, setPageTitle] = useState(props.title);
  const [data, setData] = useState(props.resp);
  const [isCustom, setIsCustom] = useState(props.isCustom);
  // FUNCTIONS ----------------

  const handleGoBack = () => {
    router.back();
  };
  // RETURN -------------------
  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.Search}>
        <main>
          {/* ------------ NAVBAR ------------ */}
          <Navbar
            leftButton={
              <Button
                icon={() => <LuArrowLeft size={24} />}
                type="text"
                color="dark"
                onClick={() => handleGoBack()}
              />
            }
            pageTitle={pageTitle}
            rightButton={null}
          />
          {/* ----------- HEADER ------------- */}
          <div className="page-header">
            <h1>
              {pageTitle} {isCustom ? "true" : " false"}
            </h1>
            <p>Total recipes : {data?.length}</p>
          </div>

          {/* ----------- SEARCH BAR ------------- */}
          <div className={styles.search__container}>
            <SearchBar />
          </div>

          {/* ------ INIZIO CONTENUTO PAGINA / ELEMENTI DELLA PAGINA ------ */}

          <div className={styles.Search__grid}>
            {data?.map((obj, index) => {
              return <CardGrid data={obj} key={index + "SearchPage"} />;
            })}
          </div>

          {/* ------ FINE CONTENUTO PAGINA / ELEMENTI DELLA PAGINA ------ */}
        </main>
      </div>
    </>
  );
};

export default Search;

export async function getServerSideProps(context) {
  // VARIABLES ----------------------------
  const contextQuery = context.query;
  console.log("------------- context", contextQuery);
  let dbResp;

  // FUNCTIONS ----------------------------
  // Resolve query -----------
  const stringQuery = contextQuery.id;
  const typeQuery = stringQuery.charAt(0);
  const search = stringQuery.slice(2);
  const promises = [];
  let isCustom = false;
  // Switch call to api based on
  switch (typeQuery) {
    case "a":
      const dataArea = await getData.area(search);
      dbResp = dataArea.meals;
      break;
    case "c":
      const dataCategory = await getData.category(search);
      dbResp = dataCategory.meals;
      break;

    case "i":
      const dataIngridients = await getData.ingridient(search);
      dbResp = dataIngridients.meals;
      break;

    case "f":
      const dataLetter = await getData.letter(search);
      dbResp = dataLetter.meals;
      break;
    case "k":
      console.log("CUSTOM QUERY : ", stringQuery);
      const auxRespArray = [];
      if (contextQuery.nation === "All") {
        console.log("ALL");
        console.log(contextQuery);

        if (typeof contextQuery.categories === "string") {
          const q = query(
            collection(db, "recipes"),
            where("strCategory", "==", contextQuery.categories)
          );
          const querySnapshot = await getDocs(q);
          querySnapshot.forEach((doc) => {
            console.log(doc.id, " => ", doc.data());
            auxRespArray.push(doc.data());
          });
        } else {
          console.log(contextQuery.categories.length);
          for (let index = 0; index < contextQuery.categories.length; index++) {
            const q = query(
              collection(db, "recipes"),
              where("strCategory", "==", contextQuery.categories[index])
            );
            const querySnapshot = await getDocs(q);
            querySnapshot.forEach((doc) => {
              console.log(doc.id, " => ", contextQuery.categories[index]);
              auxRespArray.push(doc.data());
            });

            // console.log(querySnapshot);
          }
        }
      }
      const auxPromise = await Promise.all(auxRespArray);

      isCustom = true;
      dbResp = auxPromise;
      break;

    default:
      console.log("Query sbagliata");
      dbResp = [];
      break;
  }
  console.log("dbResp : ", dbResp.length);
  // RETURN ----------------------------
  return {
    props: {
      resp: dbResp,
      title: search,
      isCustom: isCustom,
    },
  };
}
