import { useState } from 'react';
import Head from 'next/head';
import styles from './Search.module.scss';
import Navbar from '@/components/Navbar';
import Button from '@/components/Button';
import { LuArrowLeft } from 'react-icons/lu';
import CardGrid from '@/components/cardGrid';
import { getData } from '@/utils/dbManager';
import SearchBar from '@/components/SearchBar';
import { useRouter } from 'next/router';

const Search = (props) => {
  // VARIABLES ----------------
  const router = useRouter();
  // CONDITIONS ---------------
  const [pageTitle, setPageTitle] = useState(props.title);
  const [data, setData] = useState(props.resp)
  // FUNCTIONS ----------------
  const handleGoBack = () => {
    router.back();
  }
  // RETURN -------------------
  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.Search}>
        <main>
          {/* ------------ NAVBAR ------------ */}
          <Navbar
            leftButton={
              <Button
                icon={() => <LuArrowLeft size={24} />}
                type="text"
                color="dark"
                onClick={() => handleGoBack()}
              />
            }
            pageTitle={pageTitle}
            rightButton={null}
          />
          {/* ----------- HEADER ------------- */}
          <div className="page-header">
            <h1>
              {pageTitle}
            </h1>
            <p>
              Total recipes : {data?.length}
            </p>
          </div>

          {/* ----------- SEARCH BAR ------------- */}
          <div className={styles.search__container}>
            <SearchBar />
          </div>

          {/* ------ INIZIO CONTENUTO PAGINA / ELEMENTI DELLA PAGINA ------ */}

          <div className={styles.Search__grid}>
            {
              data?.map((obj, index) => {
                return (
                  <CardGrid data={obj} key={index + "SearchPage"} />
                )
              })
            }
          </div>

          {/* ------ FINE CONTENUTO PAGINA / ELEMENTI DELLA PAGINA ------ */}
        </main>
      </div>
    </>
  );
}

export default Search;

export async function getServerSideProps(context) {
  // VARIABLES ----------------------------
  const query = context.query;
  let dbResp;


  // FUNCTIONS ----------------------------
  // Resolve query -----------
  const stringQuery = query.id;
  const typeQuery = stringQuery.charAt(0);
  const search = stringQuery.slice(2)

  // Switch call to api based on 
  switch (typeQuery) {
    case "a":
      const dataArea = await getData.area(search);
      dbResp = dataArea.meals;
      break;
    case "c":
      const dataCategory = await getData.category(search);
      dbResp = dataCategory.meals;
      break;

    case "i":
      const dataIngridients = await getData.ingridient(search);
      dbResp = dataIngridients.meals;
      break;

    case "f":
      const dataLetter = await getData.letter(search);
      dbResp = dataLetter.meals;
      break;

    default:
      console.log("Query sbagliata");
      break;
  }

  // RETURN ----------------------------
  return {
    props: {
      resp: dbResp,
      title: search,
    }
  }
}
